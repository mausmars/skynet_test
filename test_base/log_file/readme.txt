测试 test_base/log_file 目录下代码
./skynet test_base/log_file/log_file_creater_config

./skynet test_base/log_file/log_file_mgr_config


----------------------------------
模式	描述
模式	描述
r	读模式 , (读)
w	写模式 , (从头写)
a	追加模式 , (末尾写)
r+	更新模式 , 保留之前的所有数据
w+	更新模式 , 删除之前的所有数据
a+	追加更新模式 , 只可在末尾写入 , 保留之前的所有数据
rb	读模式 , (读) (二进制方式)
wb	写模式 , (从头写) (二进制方式)
ab	追加模式 , (末尾写) (二进制方式)
r+b	更新模式 , 保留之前的所有数据 (二进制方式)
w+b	更新模式 , 删除之前的所有数据 (二进制方式)
a+b	追加更新模式 , 只可在末尾写入 , 保留之前的所有数据 (二进制方式)

file:seek(optional whence, optional offset): 设置和获取当前文件位置,成功则返回最终的文件位置(按字节),失败则返回nil加错误信息。参数 whence 值可以是:
"set": 从文件头开始
"cur": 从当前位置开始[默认]
"end": 从文件尾开始
offset:默认为0

file:flush(): 向文件写入缓冲中的所有数据

io.lines(optional file name): 打开指定的文件 filename 为读模式并返回一个迭代函数，每次调用将获得文件中的一行内容，当到文件尾时，将返回 nil，并自动关闭文件。
若不带参数时io.lines() <=> io.input():lines(); 读取默认输入设备的内容，但结束时不关闭文件，如：
for line in io.lines("main.lua") do
　　print(line)
end

# 完全模式
完全模式操作上与简单模式类似 , 用`句柄:方法`来代替`io.方法` .
### file:close()
**关闭文件** : 关闭该文件 , 返回`执行正确性` + `退出码` , 退出码是`exit`/`signal`二者其一 .
### file:read(...)
**读取内容** : 读取该文件 , 参数指定读取的模式 , 其模式可以是以下四种 :
1. `n` : 读取一个数字，根据 Lua 的转换文法返回浮点数或整数 ;
2. `a` : 从当前位置读取整个文件 ;
3. `l`缺省 : 读取一行并忽略行结束标记 ;
4. `L` : 读取一行并保留行结束标记 .
### file:write(...)
**写入内容** : 向该文件写入内容 , 参数指定内容 , 返回`文件句柄` + `[错误提示]` .
### file:flush()
**向该文件写入** : 将写入的数据保存到该文件中 , 无返回值 .
### file:lines(...)
**行迭代器** : 返回该文件的迭代器 , 每次迭代返回`一行的内容` , [...]为打开模式.
### file:seek([whence], [offset])
**设置位置** : 设置基于`whence`处偏移量为`offset`的位置 , 返回`偏移量`和`[错误提示]` , `whence`是如下几个其一 :
1. `set` : 基点为 0 (文件开头);
2. `cur`缺省 : 基点为当前位置 ;
3. `end` : 基点为文件尾 .
### file:setvbuf(mode, size)
**设置缓冲模式** : 设置该文件的缓存模式为`mode` , 缓冲区大小为`size` , 缓冲模式可以是以下几种 :
1. `no` : 不缓冲 , 输出操作立刻生效 ;
2. `full` : 完全缓冲 , 只有在缓存满或调用 flush 时才做输出操作 ;
3. `line` : 行缓冲 , 输出将缓冲到每次换行前 .

